{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-12-27/","result":{"data":{"site":{"siteMetadata":{"title":"AnyFer üê¶"}},"markdownRemark":{"id":"26826c7d-af07-5b84-be2c-d642afe60cdd","excerpt":"In the previous article, we have talked about how functional purity and an unidirectional architecture by using the Action-State-Reducer combo can give us‚Ä¶","html":"<p>In the previous article, we have talked about how functional purity and an unidirectional architecture by using the Action-State-Reducer combo can give us incredible powers such as time traveling.</p>\n<h1>Quick Recap</h1>\n<p>These were the main points of the previous article:</p>\n<ul>\n<li>All events that happen in an application can be described using <code class=\"language-text\">Action</code> values. The <code class=\"language-text\">Action</code> can be any kind of type, but for convenience, can think of <code class=\"language-text\">Action</code> as an enum.</li>\n<li>The application state is stored in a struct or class named <code class=\"language-text\">State</code>.</li>\n<li>We define a <code class=\"language-text\">Store</code>, which is an object that holds the application <code class=\"language-text\">State</code> , and a <strong>pure</strong> function called <code class=\"language-text\">reducer</code>.</li>\n<li>The <code class=\"language-text\">reducer</code> is a pure function (it calculates its output based only on its input, and generates no side effects), that based on the current <code class=\"language-text\">State</code> and an incoming <code class=\"language-text\">Action</code>, generates a new <code class=\"language-text\">State</code>. It is the ONLY part of the code where the <code class=\"language-text\">State</code> is modified.</li>\n<li>Whenever something happens in the <code class=\"language-text\">View</code>, it dispatches an <code class=\"language-text\">Action</code> to the <code class=\"language-text\">Store</code>. The <code class=\"language-text\">Store</code> executes the <code class=\"language-text\">reducer</code>, and updates its internal <code class=\"language-text\">State</code>. The <code class=\"language-text\">State</code> then is sent to the <code class=\"language-text\">View</code> so it can update accordingly.</li>\n</ul>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/b5ww9s4ekbugxoqmnjy9.png\" alt=\"unidirectional-11_(100)\"> </p>\n<ul>\n<li>However, we want to travel in time, to do so, we store all the <code class=\"language-text\">Action</code> sent to the store, and the initial <code class=\"language-text\">State</code>. If we want to <strong>undo,</strong> we just remove the last element in the <code class=\"language-text\">Action</code> array and compute the <code class=\"language-text\">State</code> from the beginning. Something similar can be done to <strong>redo</strong>.</li>\n</ul>\n<h1>In code</h1>\n<p>Well, if you understood everything that was described in the last section, the code may look pretty straightforward to you.</p>\n<p>Let‚Äôs dive in.</p>\n<h2>The State</h2>\n<p>Well, this is maybe the simplest component to grasp. The <code class=\"language-text\">State</code> must hold all the application state we want to use. In our case, a simple Todo app, this can be something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> todos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Todo</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> todoText<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Todo</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Identifiable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token constant\">UUID</span>\n    <span class=\"token keyword\">let</span> title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> completed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For convienience, we will define a <code class=\"language-text\">default</code> or maybe <code class=\"language-text\">initial</code> state getter on our <code class=\"language-text\">AppState</code></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> todoText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice, so let‚Äôs leave the <code class=\"language-text\">AppState</code> as it is at this point.</p>\n<h2>The Action</h2>\n<p>We can define <code class=\"language-text\">Action</code> cases as an <code class=\"language-text\">enum</code></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">Action</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice. We can modify the text input to create a new todo, create the todo using the <code class=\"language-text\">todoText</code> string we have in our <code class=\"language-text\">AppState</code>, or toggle the completion of some todo.</p>\n<p>There is something here that might look strange. Why are we sending the <code class=\"language-text\">id</code> for the todo we are creating? Well, if the <code class=\"language-text\">reducer</code> has to create the <code class=\"language-text\">UUID</code> itself, and if it uses the <code class=\"language-text\">UUID</code> initializer, we would get a different <code class=\"language-text\">UUID</code> every time we run the <code class=\"language-text\">createTodo</code> action. In such a case, the <code class=\"language-text\">reducer</code> <strong>IS NOT PURE</strong>.</p>\n<h2>The reducer</h2>\n<p>Ok, so we already have the <code class=\"language-text\">AppState</code> and the <code class=\"language-text\">Action</code> types. Let‚Äôs go for the <code class=\"language-text\">appReducer</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">appReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> newText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token comment\">// ...    </span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t\t<span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So far, so good. We have our <code class=\"language-text\">appReducer</code> that takes the current <code class=\"language-text\">AppState</code> and an <code class=\"language-text\">Action</code> and returns a new <code class=\"language-text\">AppState</code>.</p>\n<p>Let‚Äôs see how it looks the <code class=\"language-text\">todoTextChange</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">appReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> newText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">,</span>\n            todoText<span class=\"token punctuation\">:</span> newText\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pretty straightforward. If we need to change the <code class=\"language-text\">todoText</code>, we just create a new <code class=\"language-text\">AppState</code>, reusing the <code class=\"language-text\">state.todos</code>, because we don‚Äôt want to mutate them.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">appReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> newText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">let</span> newTodo <span class=\"token operator\">=</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span>\n            id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>todoText<span class=\"token punctuation\">,</span>\n            completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">var</span> currentTodos <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>todos\n        currentTodos<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">:</span> currentTodos<span class=\"token punctuation\">,</span>\n            todoText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For the <code class=\"language-text\">createTodo</code> action, we first create a new <code class=\"language-text\">Todo</code> using the <code class=\"language-text\">id</code> we send in the action, and return a new <code class=\"language-text\">AppState</code> with the old todos and the new <code class=\"language-text\">Todo</code>, and clear the <code class=\"language-text\">todoText</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">appReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> newText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">var</span> currentTodos <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>todos\n        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> currentTodos<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n        <span class=\"token keyword\">let</span> todo <span class=\"token operator\">=</span> currentTodos<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        currentTodos<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span>\n            id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n            completed<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>completed\n        <span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">:</span> currentTodos<span class=\"token punctuation\">,</span>\n            todoText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And finally, for the <code class=\"language-text\">toggleTodo</code> we get the <code class=\"language-text\">Todo</code> with the <code class=\"language-text\">id</code> equal to the <code class=\"language-text\">id</code> we send in the <code class=\"language-text\">Action</code>, change its <code class=\"language-text\">completed</code> property, and finally send a new <code class=\"language-text\">AppState</code>.</p>\n<p>So the complete reducer implementation is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">appReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> newText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">,</span>\n            todoText<span class=\"token punctuation\">:</span> newText\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">let</span> newTodo <span class=\"token operator\">=</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span>\n            id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>todoText<span class=\"token punctuation\">,</span>\n            completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">var</span> currentTodos <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>todos\n        currentTodos<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">:</span> currentTodos<span class=\"token punctuation\">,</span>\n            todoText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">var</span> currentTodos <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>todos\n        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> currentTodos<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n        <span class=\"token keyword\">let</span> todo <span class=\"token operator\">=</span> currentTodos<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        currentTodos<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span>\n            id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n            completed<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>completed\n        <span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token function\">AppState</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">:</span> currentTodos<span class=\"token punctuation\">,</span>\n            todoText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>The Store</h2>\n<p>Maybe the store is the most difficult component in this implementation. Lets review the responsibilities the store holds in this example:</p>\n<ul>\n<li>It has to hold the <code class=\"language-text\">AppState</code> and the <code class=\"language-text\">appReducer</code>.</li>\n<li>It has to dispatch <code class=\"language-text\">Action</code> values.</li>\n<li>It has to notify the <code class=\"language-text\">View</code> whenever the <code class=\"language-text\">AppState</code> mutates.</li>\n<li>It has to <strong>undo</strong> and <strong>redo</strong>, at any point.</li>\n</ul>\n<p>Let‚Äôs go one by one:</p>\n<h3>It has to hold the <code class=\"language-text\">AppState</code> and the <code class=\"language-text\">appReducer</code>.</h3>\n<p>For this one, we could just initialize the <code class=\"language-text\">Store</code> with those values.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token keyword\">let</span> reducer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        initialState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span>\n        reducer<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reducer <span class=\"token operator\">=</span> reducer\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Store</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>\n            initialState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n            reducer<span class=\"token punctuation\">:</span> appReducer\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also added a <code class=\"language-text\">default</code> static getter so we can create the <code class=\"language-text\">Store</code> using the values we have just defined above.</p>\n<h3>It has to dispatch <code class=\"language-text\">Action</code> values.</h3>\n<p>What does this mean? Well, we need a <code class=\"language-text\">dispatch</code> function, so the view can send an <code class=\"language-text\">Action</code> when something happens. </p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For now, let‚Äôs leave this as simple as this. Whenever the <code class=\"language-text\">Store</code> dispatches an <code class=\"language-text\">Action</code>, it just executes the <code class=\"language-text\">reducer</code>, passing the current <code class=\"language-text\">State</code> and the received <code class=\"language-text\">Action</code>, and stores the obtained <code class=\"language-text\">State</code> in its internal state.</p>\n<h3>It has to notify the <code class=\"language-text\">View</code> whenever the <code class=\"language-text\">AppState</code> mutates.</h3>\n<p>This will be used in <code class=\"language-text\">SwiftUI</code> in this example. How does an object notify the <code class=\"language-text\">View</code> that its internal state has changed? Exactly, conforming to <code class=\"language-text\">ObservableObject</code>, that is the simplest way of doing so, and we don‚Äôt want to overcomplicate the things. Also, we need to make the <code class=\"language-text\">state</code> property, <code class=\"language-text\">@Published</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token keyword\">let</span> reducer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        initialState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span>\n        reducer<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>initialState <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reducer <span class=\"token operator\">=</span> reducer\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Store</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>\n            initialState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n            reducer<span class=\"token punctuation\">:</span> appReducer\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is how the <code class=\"language-text\">Store</code> looks so far. Nice.</p>\n<p>This is the <code class=\"language-text\">View</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">CotentView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 1</span>\n    @<span class=\"token builtin\">StateObject</span> <span class=\"token keyword\">var</span> store <span class=\"token operator\">=</span> <span class=\"token builtin\">Store</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">HStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Add to do\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 2</span>\n                    text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Binding</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n                        <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>todoText <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> newTodoText <span class=\"token keyword\">in</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token function\">todoTextChange</span><span class=\"token punctuation\">(</span>newTodoText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 3</span>\n                    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token function\">UUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token builtin\">List</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"token comment\">// 4</span>\n                <span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> todo <span class=\"token keyword\">in</span>\n                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">)</span></span> <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">\"DONE!\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">onTapGesture</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> perform<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 3</span>\n                            store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token builtin\">HStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNDO\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 5</span>\n                    store<span class=\"token punctuation\">.</span><span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">Spacer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"REDO\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 5</span>\n                    store<span class=\"token punctuation\">.</span><span class=\"token function\">redo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is not a tutorial of <code class=\"language-text\">SwiftUI</code>, but I want to note a couple of things here</p>\n<ol>\n<li>We are storing the <code class=\"language-text\">store</code>, as a <code class=\"language-text\">@StateObject</code> inside the <code class=\"language-text\">View</code>.</li>\n<li>Bindings are a bit unusual when we are using a unidirectional architecture. In this case, we need to define a getter and a setter for it. The getter just returns the <code class=\"language-text\">todoText</code> in the <code class=\"language-text\">store</code>. The setter dispatches an <code class=\"language-text\">Action</code> whenever it changes.</li>\n<li>The <code class=\"language-text\">store</code> is used to <code class=\"language-text\">dispatch</code> actions when things happen in the <code class=\"language-text\">View</code>.</li>\n<li>The <code class=\"language-text\">store</code> is also used to get the current state of the application.</li>\n<li>The <code class=\"language-text\">undo</code> and <code class=\"language-text\">redo</code> methods in the <code class=\"language-text\">store</code> are yet to be defined, but the <code class=\"language-text\">View</code> is already set at this point.</li>\n</ol>\n<h3>It has to <strong>undo</strong> and <strong>redo</strong>, at any point.</h3>\n<p>The last point. This can be done by:</p>\n<ul>\n<li>Storing an array in the <code class=\"language-text\">Store</code> with all of the <code class=\"language-text\">Action</code> that have been dispatched so far. Let‚Äôs call this <code class=\"language-text\">appliedActions</code>.</li>\n<li>Storing the initial <code class=\"language-text\">AppState</code> in a variable called <code class=\"language-text\">initialState</code> so we can compute any subsequent <code class=\"language-text\">State</code> by applying an array of <code class=\"language-text\">Action</code> values using the <code class=\"language-text\">reducer</code>.</li>\n<li>Storing an array in the <code class=\"language-text\">Store</code> with all of the <code class=\"language-text\">Action</code> values that have been ‚Äúundone‚Äù, so we can ‚Äúredo‚Äù them (by appending them again in the <code class=\"language-text\">appliedActions</code> array). Let‚Äôs call this array <code class=\"language-text\">undoneActions</code>.</li>\n</ul>\n<p>In code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> initialState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> appliedActions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Action</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> undoneActions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Action</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token keyword\">let</span> reducer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        initialState<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span>\n        reducer<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">AppState</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AppState</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>initialState <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reducer <span class=\"token operator\">=</span> reducer\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Store</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>\n            initialState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n            reducer<span class=\"token punctuation\">:</span> appReducer\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        appliedActions<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n        undoneActions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">redo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> undoneAction <span class=\"token operator\">=</span> undoneActions<span class=\"token punctuation\">.</span><span class=\"token function\">popLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            appliedActions<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>undoneAction<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> action <span class=\"token keyword\">in</span> appliedActions <span class=\"token punctuation\">{</span>\n                state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state <span class=\"token operator\">=</span> initialState\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> undoneAction <span class=\"token operator\">=</span> appliedActions<span class=\"token punctuation\">.</span><span class=\"token function\">popLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            undoneActions<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>undoneAction<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> action <span class=\"token keyword\">in</span> appliedActions <span class=\"token punctuation\">{</span>\n                state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That is the final implementation for the <code class=\"language-text\">Store</code>. Note that for the <code class=\"language-text\">redo</code> and <code class=\"language-text\">undo</code> we use the <code class=\"language-text\">reducer</code> to compute all the actions again, and we play with the <code class=\"language-text\">appliedActions</code> and <code class=\"language-text\">undoneActions</code> arrays to move <code class=\"language-text\">Action</code> values from one place to another, achieving in this way, time traveling in Swift.</p>\n<h1>Conclusion</h1>\n<p>To sum up, this has been a quick introduction to Redux (unidirectional architectures) in Swift, completely from scratch. There A LOT of missing pieces in this implementation, of course. We didn‚Äôt cover testing, and we don‚Äôt have any way of modeling side effects, like network requests. I highly recommend <a href=\"https://github.com/pointfreeco/swift-composable-architecture\">The Composable Architecture</a> if you want to use this kind of architectures in production. As far as I have use this architecture, it worked fine to me. However, I have to say this is still early days in SwiftUI architectures and the landscape might change. My last piece of advice here is: remember Software Engineering is about taking decisions balancing tradeoffs. Keep curiosity but think everything carefully.</p>","frontmatter":{"title":"Unidirectional Architectures and time traveling in Swift: II","date":"December 27, 2020","description":null}},"previous":{"fields":{"slug":"/2020-12-21/"},"frontmatter":{"title":"Unidirectional Architectures and time traveling in Swift: I"}},"next":{"fields":{"slug":"/2021-01-03/"},"frontmatter":{"title":"Noise and sound"}}},"pageContext":{"id":"26826c7d-af07-5b84-be2c-d642afe60cdd","previousPostId":"da1d73e5-8e9e-519e-82e9-920ae83fd8b3","nextPostId":"b1ab108d-e186-55aa-b8c0-3701a199e4ff"}},"staticQueryHashes":["2841359383","916993862"]}