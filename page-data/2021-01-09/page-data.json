{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-01-09/","result":{"data":{"site":{"siteMetadata":{"title":"AnyFer üê¶"}},"markdownRemark":{"id":"2ad7ffa3-9bea-57ac-980b-de8ffafa415a","excerpt":"The Container We call containers in SwiftUI to those views which can render other views passed by argument. Containers are central to SwiftUI. As soon as you‚Ä¶","html":"<h1>The Container</h1>\n<p>We call containers in SwiftUI to those views which can render other views passed by argument. Containers are central to SwiftUI. As soon as you start learning SwiftUI, you use <code class=\"language-text\">VStack</code>, <code class=\"language-text\">HStack</code>, <code class=\"language-text\">List</code>, etc.</p>\n<p>The main idea behind a container is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Container</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Content</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span>\n\n\t<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>@<span class=\"token builtin\">ViewBuilder</span> <span class=\"token number\">_</span> builder<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>builder <span class=\"token operator\">=</span> builder\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This container, in particular, does absolutely nothing. I mean, this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Is exactly the same as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">Container</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Both of them will generate the same layout:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/7kwcmd4u73yjk0d81o4l.png\" alt=\"snp-01\"></p>\n<p>However, this is the base for some interesting possibilities.</p>\n<h1>@ViewBuilder</h1>\n<p>So you might be thinking, ok, but why is that <code class=\"language-text\">@ViewBuilder</code> property wrapper needed?</p>\n<p>Well, if you didn‚Äôt have the <code class=\"language-text\">@ViewBuilder</code> property wrapper, in some Container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Container</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Content</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> builder<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>builder <span class=\"token operator\">=</span> builder\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Everything would work fine for just one <code class=\"language-text\">View</code>. The problem will come when we try to render something like this, because the closure argument in the <code class=\"language-text\">Container</code> should return a single view.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">Container</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding <code class=\"language-text\">@ViewBuilder</code> in the closure, as shown at the beginning will fix this.</p>\n<h1>Use Cases</h1>\n<h2>Layout</h2>\n<p>I‚Äôll mention two uses of custom Containers. The first one is <strong>layout</strong>. We can send views to a container and let the container arrange them as needed.</p>\n<p>For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">TopArrangementContainer</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Content</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>@<span class=\"token builtin\">ViewBuilder</span> <span class=\"token number\">_</span> builder<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>builder <span class=\"token operator\">=</span> builder\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Spacer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">TopArrangementContainer</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This would generate this view:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/8q80km4seedhnpgffmuu.png\" alt=\"snp-02\"></p>\n<p>Of course there are many more interesting layouts you can apply, but I just wanted to show you one of them.</p>\n<h2>Data Fetching</h2>\n<p><strong>Render Props</strong> is a concept from React (<a href=\"https://reactjs.org/docs/render-props.html\">https://reactjs.org/docs/render-props.html</a>). In React, you can basically send a closure to a Container, that takes some parameter and builds a View based on it.</p>\n<p>This can be useful in many situations. <code class=\"language-text\">GeometryReader</code> is a very good example of this design pattern. </p>\n<p>Let‚Äôs do something similar but for data fetching. Imagine we want to fetch users from JSONPlaceholder: <a href=\"https://jsonplaceholder.typicode.com/users\">https://jsonplaceholder.typicode.com/users</a> </p>\n<p>So we define a model and an <code class=\"language-text\">ObservableObject</code> to use as a view model.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Identifiable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersViewModel</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">var</span> users<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> cancellables <span class=\"token operator\">=</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">AnyCancellable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">URLSession</span><span class=\"token punctuation\">.</span>shared\n            <span class=\"token punctuation\">.</span><span class=\"token function\">dataTaskPublisher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://jsonplaceholder.typicode.com/users\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> decoder<span class=\"token punctuation\">:</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">replaceError</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pretty straightforward. The <code class=\"language-text\">User</code> struct is the model that will hold the data we fetch from the API, and the <code class=\"language-text\">UsersViewModel</code> is the class that will fetch the users and store them in a <code class=\"language-text\">@Published</code> variable. The important thing about <code class=\"language-text\">UsersViewModel</code> is that we can use it as a <code class=\"language-text\">@StateObject</code>, for example, in our <code class=\"language-text\">Container</code>. Let‚Äôs do it:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">UsersProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Content</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token builtin\">StateObject</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> viewModel <span class=\"token operator\">=</span> <span class=\"token function\">UsersViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>@<span class=\"token builtin\">ViewBuilder</span> <span class=\"token number\">_</span> builder<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>builder <span class=\"token operator\">=</span> builder\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Some important things to highlight here:</p>\n<ul>\n<li>This Container is now called <code class=\"language-text\">UsersProvider</code>, since this name describes a bit better what it does.</li>\n<li>We are using the <code class=\"language-text\">UsersViewModel</code> as a <code class=\"language-text\">@StateObject</code> here.</li>\n<li>The <code class=\"language-text\">builder</code> closure now takes the <code class=\"language-text\">[User]</code> array as a parameter. So whenever the users in the <code class=\"language-text\">UsersViewModel</code> change, it will trigger a render in the parent <code class=\"language-text\">View</code>.</li>\n</ul>\n<p>In the <code class=\"language-text\">ContentView</code> can be refactored to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">UsersProvider</span> <span class=\"token punctuation\">{</span> users <span class=\"token keyword\">in</span>\n            <span class=\"token function\">List</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> user <span class=\"token keyword\">in</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we can decide how to render the users we get from the API.</p>\n<h1>Summary</h1>\n<p>This has been a quick introduction to custom containers in SwiftUI. I‚Äôm pretty sure there are many many other interesting use cases for this pattern that will appear over time, but the Layout and Data Fetching use cases are very interesting and useful ones.</p>","frontmatter":{"title":"Custom Containers in SwiftUI","date":"January 09, 2021","description":null}},"previous":{"fields":{"slug":"/2021-01-03/"},"frontmatter":{"title":"Noise and sound"}},"next":null},"pageContext":{"id":"2ad7ffa3-9bea-57ac-980b-de8ffafa415a","previousPostId":"b1ab108d-e186-55aa-b8c0-3701a199e4ff","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}