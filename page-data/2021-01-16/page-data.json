{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-01-16/","result":{"data":{"site":{"siteMetadata":{"title":"AnyFer üê¶"}},"markdownRemark":{"id":"1d9d5f28-3893-5f66-8a4d-ae2e95091428","excerpt":"I have worked with Core Data long time ago and left with a bad impression about the framework. I‚Äôve never used it again (started using Realm short after it‚Ä¶","html":"<p>I have worked with Core Data long time ago and left with a bad impression about the framework. I‚Äôve never used it again (started using Realm short after it). </p>\n<p>However, it seems that something changed. I‚Äôm not sure if Core Data became much better (<code class=\"language-text\">NSPersistenceContainer</code> has been added after I stopped using Core Data), or if I leveled up as a developer. The thing is that I used it for a project recently and it was a pleasure to work with.</p>\n<p>In this article, I will show you how you can start using Core Data, and how you can enjoy using it most of the time. Of course this is a brief introduction. If you want more information about how to correctly use Core Data, I would highly recommend reading Donny Wals‚Äô Practical Core Data book <a href=\"https://gumroad.com/l/practical-core-data\">https://gumroad.com/l/practical-core-data</a> . I bought it and it has been worth the money spent.</p>\n<h1>What is Core Data?</h1>\n<p>Core Data is not an ORM. Really, it is not an ORM. Core Data is a graph-based optionally persisted model framework. Core Data can take care of your model layer, it can hold your entities, so you can ask Core Data for sorted, or filtered sets of entities that you need in some point of your app execution. </p>\n<p>Core Data can store your data in a SQLite database, or it can have your data in-memory, or even synchronized with CloudKit.</p>\n<h1>An Example</h1>\n<p>I‚Äôll give you an introduction throughout this post on how to start developing apps in SwiftUI using Core Data.</p>\n<p>The app we‚Äôll be building will let us create many ToDo lists, complete, and delete them. Really typical.</p>\n<p>If you prefer to just go over the code and learn it the hard way, here is the Github repo: <a href=\"https://github.com/fmo91/TodoListsSwiftUI\">https://github.com/fmo91/TodoListsSwiftUI</a> </p>\n<h1>The Stack</h1>\n<p>The Core Data Stack is composed of objects which interact between them to persist entities. The main components of the Core Data Stack are:</p>\n<ul>\n<li><code class=\"language-text\">NSManagedObjectModel</code>: This class represents the descriptions for the entities you‚Äôll persist in your apps. Most of times, you‚Äôll define those entities using the Xcode visual editor, which will create a file with extension <code class=\"language-text\">.xcdatamodeld</code>.</li>\n<li><code class=\"language-text\">NSPersistentStoreCoordinator</code>: The persistent store coordinator will interface with the actual <code class=\"language-text\">Persistent Stores</code>, such as the SQLite databases. This is the class that interface between your app and the actual persistent stores. It needs a <code class=\"language-text\">NSManagedObjectModel</code> to work.</li>\n<li><code class=\"language-text\">NSManagedObjectContext</code>: <strong>The most important class in your Core Data Stack</strong>. Or, at least, the class you‚Äôll interact the most during your app development. It works as a scratchpad where you can make modifications to your <code class=\"language-text\">NSManagedObject</code> entities and then save the context to reflect the changes in the persistent stores. It needs a <code class=\"language-text\">NSPersistentStoreCoordinator</code> to work.</li>\n</ul>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/lq6lwbzs2edb9pt2b07r.png\" alt=\"CoreData-01\"> </p>\n<p>This is how it looks in code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> storeCoordinator<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSPersistentStoreCoordinator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> coordinator <span class=\"token operator\">=</span> <span class=\"token function\">NSPersistentStoreCoordinator</span><span class=\"token punctuation\">(</span>managedObjectModel<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token builtin\">FileManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">urls</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>documentDirectory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>userDomainMask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendingPathComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoListsSwiftUI.sqlite\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token operator\">!</span> coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">addPersistentStore</span><span class=\"token punctuation\">(</span>ofType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSSQLiteStoreType</span><span class=\"token punctuation\">,</span>\n                                        configurationName<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span>\n                                        at<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span>\n                                        options<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> coordinator\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> model<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token builtin\">Bundle</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>forResource<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TodoListsSwiftUI\"</span><span class=\"token punctuation\">,</span> withExtension<span class=\"token punctuation\">:</span> <span class=\"token string\">\"momd\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n    <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token function\">NSManagedObjectModel</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token function\">NSManagedObjectContext</span><span class=\"token punctuation\">(</span>concurrencyType<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>mainQueueConcurrencyType<span class=\"token punctuation\">)</span>\n    context<span class=\"token punctuation\">.</span>persistentStoreCoordinator <span class=\"token operator\">=</span> storeCoordinator\n    <span class=\"token keyword\">return</span> context\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, since iOS 10, we have another class that abstracts most of this complexity from us. <code class=\"language-text\">NSPersistentContainer</code>, which holds all these classes and exposes a <code class=\"language-text\">viewContext</code> property which is a <code class=\"language-text\">NSManagedObjectContext</code> you can use to generate <code class=\"language-text\">NSManagedObject</code> entities, save, delete and update them. And see how easier it is to create the stack:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> persistentContainer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSPersistentContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token function\">NSPersistentContainer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TodoListsSwiftUI\"</span><span class=\"token punctuation\">)</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">loadPersistentStores</span><span class=\"token punctuation\">(</span>completionHandler<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">_</span><span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error ocurred while instantiating persistentContainer: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> container\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The only thing that should change between this code and your app‚Äôs code is the name you send to the persistent container init. That name is the name of the <code class=\"language-text\">.xcdatamodeld</code> file where you define your entities, and relationships. The <code class=\"language-text\">.xcdatamodeld</code> file is normally named after your project.</p>\n<p>All of the information I described in this section is important in order to know how the Core Data stack is structured. However, when you create a new project in Xcode, it gives you the option to start the project with Core Data. By enabling that option, Xcode will generate an <code class=\"language-text\">NSPersistentContainer</code> and make it visible for your app code.</p>\n<h1>The model editor</h1>\n<p>So, you have created a Xcode project with Core Data, or you have initialized a new Core Data stack in an existing project. I recommend doing so in a class that holds your <code class=\"language-text\">NSPersistentContainer</code>, like in this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersistenceProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> persistentContainer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSPersistentContainer</span>\n    <span class=\"token keyword\">var</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token punctuation\">{</span> persistentContainer<span class=\"token punctuation\">.</span>viewContext <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PersistenceProvider</span> <span class=\"token operator\">=</span> <span class=\"token function\">PersistenceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        persistentContainer <span class=\"token operator\">=</span> <span class=\"token function\">NSPersistentContainer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TodoListsSwiftUI\"</span><span class=\"token punctuation\">)</span>\n        \n        persistentContainer<span class=\"token punctuation\">.</span>loadPersistentStores <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed loading persistent stores with error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You‚Äôll also need a <code class=\"language-text\">.xcdatamodeld</code>. You can create it by creating a new Data Model in Xcode:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/c8b4phvca4uo8whyx0wh.png\" alt=\"cd-000\"> </p>\n<p>If you open the Data Model in Xcode, you‚Äôll see an editor where you can create Entities, and add and configure Attributes in your Entities and Relationships among your Entities.</p>\n<p>Create two entities: <code class=\"language-text\">Todo</code> and <code class=\"language-text\">TodoList</code>. </p>\n<p>In <code class=\"language-text\">Todo</code>, add <code class=\"language-text\">title</code>, <code class=\"language-text\">creationDate</code> and <code class=\"language-text\">completed</code>, as non-optional properties, as shown in the image:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/wmzhxwh1qkbvtzo9gvgq.png\" alt=\"cd-001\"> </p>\n<p>In <code class=\"language-text\">TodoList</code>, add <code class=\"language-text\">title</code> and <code class=\"language-text\">creationDate</code>, as non-optional properties, as shown in the image:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/dwae1fwd562zrpzq9htk.png\" alt=\"cd-002\"> </p>\n<p>There should be a relationship between <code class=\"language-text\">Todo</code> and <code class=\"language-text\">TodoList</code>, since a <code class=\"language-text\">TodoList</code> may have any number of <code class=\"language-text\">Todo</code> objects related to it.</p>\n<p>So, as also shown in the images, create a <code class=\"language-text\">list</code> relationship in <code class=\"language-text\">Todo</code> with destination equal to <code class=\"language-text\">TodoList</code> and a <code class=\"language-text\">todos</code> relationship in <code class=\"language-text\">TodoList</code> with destination equal to <code class=\"language-text\">Todo</code> and the inverse equal to <code class=\"language-text\">list</code>. This way, we have the counterpart of the <code class=\"language-text\">list</code> relationship.</p>\n<p>Relationships may be To One or To Many. If you select a Relationship and inspect its properties in the editor:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/5n9bx7c9tt5u4w6c4wfb.png\" alt=\"cd-003\"> </p>\n<p>You‚Äôll notice a <code class=\"language-text\">type</code> property. In the <code class=\"language-text\">todos</code> relationship set the <code class=\"language-text\">type</code> as To Many, because a list may have many <code class=\"language-text\">Todo</code> entities related to it. In the <code class=\"language-text\">list</code> relationship, set the <code class=\"language-text\">type</code> as To One, because a <code class=\"language-text\">Todo</code> may only be included in a single list.</p>\n<p>There is also another important property you should set in the relationships. Without entering in further details, I recommend setting the <code class=\"language-text\">Delete Rule</code> in the <code class=\"language-text\">todos</code> relationship as Cascade. By doing so, you ensure whenever you delete a list, all its todos entities will also be deleted.</p>\n<p>The default Codegen setting is <code class=\"language-text\">Class Definition</code>, which means that Xcode will generate classes for all these entities whenever the project is built. You don‚Äôt have to manually create anything.</p>\n<h1>Operations in Core Data</h1>\n<p>So far, so good. We have initialized the Stack in a class named <code class=\"language-text\">PersistenceProvider</code>, with the most useful class in it, the <code class=\"language-text\">NSManagedObjectContext</code> being hold by the <code class=\"language-text\">NSPersistentContainer</code>.</p>\n<p>The <code class=\"language-text\">NSManagedObjectContext</code> can be used for all the operations we need to do from the app that would impact in the persistent stores.</p>\n<p>For all the operations you do in Core Data, I recommend creating classes that will take care of them. In this example app, I created extensions for our <code class=\"language-text\">PersistenceProvider</code> helper class, with methods to create, read, update or delete entities.</p>\n<h2>Create</h2>\n<p>To create a new entity, you just instantiate the object for that entity sending the context to its constructor and then save the context. As simple as it sounds:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@discardableResult\n<span class=\"token keyword\">func</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">TodoList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title\n    list<span class=\"token punctuation\">.</span>creationDate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> list\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To create a <code class=\"language-text\">Todo</code> for this <code class=\"language-text\">TodoList</code>, it is as simple as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@discardableResult\n<span class=\"token keyword\">func</span> <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TodoList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Todo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> todo <span class=\"token operator\">=</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n    todo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title\n    todo<span class=\"token punctuation\">.</span>creationDate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">addToTodos</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> todo\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The only maybe weird part is the <code class=\"language-text\">addToTodos</code> method that we call on <code class=\"language-text\">list</code>. This is also generated by Xcode. It adds the <code class=\"language-text\">Todo</code> to the relationship.</p>\n<h2>Read</h2>\n<p><code class=\"language-text\">NSFetchRequest</code> is a class that represents a query. Fetch requests can be created using a static method in the <code class=\"language-text\">NSManagedObject</code> subclasses, and can include a predicate, which is an object that describes conditions on the query, and sort descriptors, to define the order in which the results will be returned (otherwise, they will be got in random order):</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> allListsRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">TodoList</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">TodoList</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">TodoList</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>sortDescriptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token function\">NSSortDescriptor</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\tkeyPath<span class=\"token punctuation\">:</span> \\<span class=\"token builtin\">TodoList</span><span class=\"token punctuation\">.</span>creationDate<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\tascending<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> request\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the request for getting all <code class=\"language-text\">TodoList</code> entities. See I‚Äôm not setting any predicate for this fetch request. Instead, I‚Äôm requesting all the <code class=\"language-text\">TodoList</code> that are in the store.</p>\n<p>If I need all the <code class=\"language-text\">Todo</code> for a list, this is the fetch request I‚Äôd set:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">todosRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TodoList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Todo</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Todo</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Todo</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>predicate <span class=\"token operator\">=</span> <span class=\"token function\">NSPredicate</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">:</span> <span class=\"token string\">\"%K == %@\"</span><span class=\"token punctuation\">,</span> #<span class=\"token function\">keyPath</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Todo</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>sortDescriptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">NSSortDescriptor</span><span class=\"token punctuation\">(</span>keyPath<span class=\"token punctuation\">:</span> \\<span class=\"token builtin\">Todo</span><span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">,</span> ascending<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">NSSortDescriptor</span><span class=\"token punctuation\">(</span>keyPath<span class=\"token punctuation\">:</span> \\<span class=\"token builtin\">Todo</span><span class=\"token punctuation\">.</span>creationDate<span class=\"token punctuation\">,</span> ascending<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> request\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a bit more complex, since I‚Äôm adding a predicate. The <code class=\"language-text\">NSPredicate</code> takes a <code class=\"language-text\">format</code>, for which I send a <code class=\"language-text\">keyPath</code> referencing the <code class=\"language-text\">list</code> property.</p>\n<p>Also, we‚Äôre using two <code class=\"language-text\">NSSortDescriptor</code>. One for the <code class=\"language-text\">completed</code> property, and the other for the <code class=\"language-text\">creationDate</code>, so we know that the most recently created entity will be at the beginning of the result array.</p>\n<p>When we use many <code class=\"language-text\">NSSortDescriptor</code>, they must be written in order of importance. So in this case, it will sort the results using <code class=\"language-text\">completed</code>, and then using <code class=\"language-text\">creationDate</code>.</p>\n<p>To execute a request, you just call the method <code class=\"language-text\">fetch</code> in the managed object context:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">!</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>allListsRequest<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Update</h2>\n<p>Updating an entity in CoreData is as simple as setting new values to its properties and then saving the context:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> todo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Todo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Delete</h2>\n<p>For deleting an entity you call the method <code class=\"language-text\">delete</code> in the context and then save the context:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> lists<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">TodoList</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> list <span class=\"token keyword\">in</span> lists <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> todos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Todo</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> todo <span class=\"token keyword\">in</span> todos <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Adding the context to the environment in SwiftUI</h1>\n<p>In order to make the <code class=\"language-text\">NSManagedObjectContext</code> available from all the application, you need to inject it in the initial view for your app using the <code class=\"language-text\">environment</code> modifier, injecting the context for the <code class=\"language-text\">\\.managedObjectContext</code> key, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftUI</span>\n\n@main\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">TodoListsSwiftUIApp</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">environment</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\t\t\t\t\t\\<span class=\"token punctuation\">.</span>managedObjectContext<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t\t\t\t<span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>context\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>@FetchRequest</h1>\n<p>Inside your views, you can set a property as a <code class=\"language-text\">@FetchRequest</code>, so you can add relate a property in your view to a request to Core Data. It will trigger the fetch request, and in case the underlying data storage changes, the fetch request will trigger again, making the view re-render.</p>\n<p>Let‚Äôs see the full example of the list of <code class=\"language-text\">Todo</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">TodoListsListView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">FetchRequest</span><span class=\"token punctuation\">(</span>fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>allListsRequest<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">var</span> allLists<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FetchedResults</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">TodoList</span><span class=\"token operator\">></span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">List</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>allLists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> list <span class=\"token keyword\">in</span>\n                    <span class=\"token function\">NavigationLink</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">:</span> <span class=\"token function\">TodoListDetailView</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>title <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">onDelete</span><span class=\"token punctuation\">(</span>perform<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> indexSet <span class=\"token keyword\">in</span>\n                    <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>allLists<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>indexSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token function\">TextInputView</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Add a new list\"</span><span class=\"token punctuation\">,</span>\n                actionTitle<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">,</span>\n                onCreate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> listText <span class=\"token keyword\">in</span>\n                    <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> listText<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">navigationTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lists\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, whenever the <code class=\"language-text\">allLists</code> property changes, the body will be recalculated.</p>\n<p><strong>Note</strong>: <code class=\"language-text\">TextInputView</code> is just a helper component, it doesn‚Äôt do anything related to Core Data itself. Here is the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">TextInputView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token builtin\">State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    \n    <span class=\"token keyword\">let</span> title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> actionTitle<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> onCreate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">HStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">:</span> $text<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>actionTitle<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> text<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n                \n                <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n                text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>FetchRequest</h1>\n<p>Now, imagine if you had to do some query depending on a parameter you send to the View using its <code class=\"language-text\">init</code> method. The <code class=\"language-text\">@FetchRequest</code> property wrapper won‚Äôt be useful in that case. We can create a <code class=\"language-text\">FetchRequest</code> object using its <code class=\"language-text\">init</code>. This is the full implementation for <code class=\"language-text\">TodoListDetailView</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">TodoListDetailView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TodoList</span>\n    <span class=\"token keyword\">var</span> todos<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Todo</span><span class=\"token operator\">></span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TodoList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> list\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>todos <span class=\"token operator\">=</span> <span class=\"token builtin\">FetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Todo</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">todosRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">TodoListView</span><span class=\"token punctuation\">(</span>\n                todos<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">.</span>wrappedValue<span class=\"token punctuation\">,</span>\n                onSelect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> todo <span class=\"token keyword\">in</span>\n                    <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                onDelete<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> todos <span class=\"token keyword\">in</span>\n                    <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">TextInputView</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Add a new item\"</span><span class=\"token punctuation\">,</span>\n                actionTitle<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">,</span>\n                onCreate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> todoText <span class=\"token keyword\">in</span>\n                    <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> todoText<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">navigationTitle</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>title <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">FetchRequest</code> class has a <code class=\"language-text\">wrappedValue</code> property with the query result.</p>\n<p><strong>Note</strong>: <code class=\"language-text\">TodoListView</code> is just a helper component, it doesn‚Äôt do anything related to Core Data itself. Here is the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">TodoListView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> todos<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FetchedResults</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Todo</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">let</span> onSelect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span>\n    <span class=\"token keyword\">let</span> onDelete<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Todo</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">List</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> todo <span class=\"token keyword\">in</span>\n                <span class=\"token builtin\">VStack</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">\"[COMPLETED] \"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundColor</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">?</span> <span class=\"token builtin\">Color</span><span class=\"token punctuation\">.</span>gray <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Color</span><span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span>onTapGesture <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span>onDelete <span class=\"token punctuation\">{</span> indexSet <span class=\"token keyword\">in</span> <span class=\"token function\">onDelete</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>indexSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Demo</h1>\n<p>So, that‚Äôs it! Download the code (or copy it from this article), and you can compile it and see the actual app running.</p>\n<h1>Testing</h1>\n<p>If you‚Äôd like to unit test your Core Data implementation, you‚Äôll need to do some changes in our <code class=\"language-text\">PersistenceProvider</code>. </p>\n<p>First, we want to test each test independently, and start from a clean state for each test case, so we‚Äôll create an enum for each case: <code class=\"language-text\">inMemory</code> and <code class=\"language-text\">persisted</code>. The <code class=\"language-text\">PersistenceProvider</code> will be initialized with a case of that enum, defaulting to <code class=\"language-text\">persisted</code>. We‚Äôll also share the same <code class=\"language-text\">NSManagedObjectModel</code> for all the tests, since that will be much more efficient, and finally point the database location to <code class=\"language-text\">/dev/null</code> so it won‚Äôt save anything in disk:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CoreData</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersistenceProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token builtin\">StoreType</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> inMemory<span class=\"token punctuation\">,</span> persisted\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> managedObjectModel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> bundle <span class=\"token operator\">=</span> <span class=\"token function\">Bundle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">PersistenceProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> bundle<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>forResource<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TodoListsSwiftUI\"</span><span class=\"token punctuation\">,</span> withExtension<span class=\"token punctuation\">:</span> <span class=\"token string\">\"momd\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to locate momd file for TodoListsSwiftUI\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token function\">NSManagedObjectModel</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to load momd file for TodoListsSwiftUI\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> model\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">let</span> persistentContainer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSPersistentContainer</span>\n    <span class=\"token keyword\">var</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token punctuation\">{</span> persistentContainer<span class=\"token punctuation\">.</span>viewContext <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PersistenceProvider</span> <span class=\"token operator\">=</span> <span class=\"token function\">PersistenceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>storeType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">StoreType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>persisted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        persistentContainer <span class=\"token operator\">=</span> <span class=\"token function\">NSPersistentContainer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TodoListsSwiftUI\"</span><span class=\"token punctuation\">,</span> managedObjectModel<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span>managedObjectModel<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> storeType <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>inMemory <span class=\"token punctuation\">{</span>\n            persistentContainer<span class=\"token punctuation\">.</span>persistentStoreDescriptions<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/dev/null\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        persistentContainer<span class=\"token punctuation\">.</span>loadPersistentStores <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed loading persistent stores with error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After having done this, we can start testing our implementation in our unit tests target:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">XCTest</span>\n@testable <span class=\"token keyword\">import</span> <span class=\"token builtin\">TodoListsSwiftUI</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoListsSwiftUITests</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">PersistenceProvider</span><span class=\"token operator\">!</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">setUpWithError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        provider <span class=\"token operator\">=</span> <span class=\"token function\">PersistenceProvider</span><span class=\"token punctuation\">(</span>storeType<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>inMemory<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">test_saveTodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> provider<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span>allListsRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lista 1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">test_deleteTodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> list1 <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 1\"</span><span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 2\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> list3 <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 3\"</span><span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 4\"</span><span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>list1<span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> provider<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span>allListsRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">test_saveTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 1\"</span><span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">let</span> todos <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> provider<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">todosRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">\"Todo 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Todo 1\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function\">test_deleteTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createList</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lista 1\"</span><span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> todo2 <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span>\n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span>\n        \n        provider<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>todo2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">let</span> todos <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> provider<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">todosRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>\n            todos<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">\"Todo 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Todo 1\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>To sum up</h1>\n<p>That‚Äôs finally it. I covered all the basic steps you need to keep in mind while starting a new project using Core Data in SwiftUI. Of course there are a thousand of things you‚Äôll learn after it. Migrations, for example.</p>\n<p>I highly recommend reading Donny Wals‚Äô Practical Core Data book. It‚Äôs worth reading it if you‚Äôll use Core Data in a project.</p>","frontmatter":{"title":"Persistence with Core Data and SwiftUI","date":"January 16, 2021","description":null}},"previous":{"fields":{"slug":"/2021-01-09/"},"frontmatter":{"title":"Custom Containers in SwiftUI"}},"next":null},"pageContext":{"id":"1d9d5f28-3893-5f66-8a4d-ae2e95091428","previousPostId":"2ad7ffa3-9bea-57ac-980b-de8ffafa415a","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}