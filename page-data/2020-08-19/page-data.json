{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-08-19/","result":{"data":{"site":{"siteMetadata":{"title":"AnyFer üê¶"}},"markdownRemark":{"id":"b21ff26e-d425-51d4-9882-fd0ca0ea7221","excerpt":"Introduction The last couple of weeks I had to work on a task that demanded most of my time. The assignment was about increasing the code coverage in a module‚Ä¶","html":"<h1>Introduction</h1>\n<p>The last couple of weeks I had to work on a task that demanded most of my time. The assignment was about increasing the code coverage in a module by adding tests to one layer at a time.</p>\n<p>Reducing technical debt is one of the things I love doing the most in the context of software development. Increasing the codebase quality is more and more important as the time goes on and the codebase gets bigger. </p>\n<p>However, it didn‚Äôt come without the pain, and I learnt some important things along the process. During this article, I‚Äôll tell you some of the things I‚Äôve learnt.</p>\n<p>Let‚Äôs start by defining some basic concepts so we can then go on our specific case.</p>\n<h1>The basic questions</h1>\n<h2>What</h2>\n<p>There are different types of tests: Scenario-based testing, Unit testing, E2E testing, etc. Unit testing, in particular, is the process of testing one module at a time. </p>\n<p>That‚Äôs REALLY important to notice. We are testing ONE module at a time, in isolation, which is called SUT (system under test). When I‚Äôm testing a presenter, I don‚Äôt care if the database is working properly or not, or even if it wasn‚Äôt developed yet. The only thing I care is that my module is working properly and doing whatever it is supposed to do in a good manner.</p>\n<h2>Why</h2>\n<p>Unit testing the codebase has a number of outcomes that are important:</p>\n<ul>\n<li><strong>Ensure the code works properly</strong>: This one is, of course, the main reason to test our code.</li>\n<li><strong>Ensure the code is properly structured:</strong> This is less obvious than the previous one. But it‚Äôs important to note that a code that is testable, is almost always a good structured code.</li>\n<li><strong>Document the right behavior of the code</strong>: Tests are a way of documenting what the code is supposed to do.</li>\n</ul>\n<h2>How</h2>\n<p>As mentioned earlier, a unit test implies that the code is tested in isolation, that means:</p>\n<ul>\n<li>A code that is failing in one class shouldn‚Äôt break a test for another class.</li>\n<li>A class that depends in another class, should be tested isolated from those dependencies.</li>\n</ul>\n<p>In addition to that, there are a couple of other properties from Unit tests that we should pay attention to:</p>\n<ul>\n<li>Unit test cases should be fast to run.</li>\n<li>Unit test cases should be reproducible.</li>\n</ul>\n<p>All of these properties will ensure us that our test will give us rich information about what works, what doesn‚Äôt, and where the error actually is.</p>\n<h1>Dependencies</h1>\n<p>Dependencies are modules (functions/classes) another module depends upon.</p>\n<p>For example, in this (probably incorrect) code fragment:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableView</span><span class=\"token operator\">!</span>\n\t<span class=\"token keyword\">let</span> api <span class=\"token operator\">=</span> <span class=\"token function\">API</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> contacts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Contact</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">configureTableView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\tapi<span class=\"token punctuation\">.</span>fetchContacts <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> result <span class=\"token keyword\">in</span>\n\t\t\t<span class=\"token keyword\">switch</span> result <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>contacts <span class=\"token operator\">=</span> contacts\n\t\t\t\t<span class=\"token keyword\">self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>tableView<span class=\"token punctuation\">.</span><span class=\"token function\">reloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span>failure<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">ViewController</code> depends upon a <code class=\"language-text\">API</code> that brings an array of <code class=\"language-text\">Contact</code> to it. That is a dependency. Imagine there is a bug in the <code class=\"language-text\">API</code> <code class=\"language-text\">fetchContacts</code> method, and we are testing <code class=\"language-text\">ViewController</code>, we would see there is an error in the <code class=\"language-text\">ViewController</code> while the error is actually in the <code class=\"language-text\">API</code>! That‚Äôs why we need to isolate the classes from their dependencies. An architecture that lets us test each of its components in isolation, is a testable architecture.</p>\n<h1>Techniques</h1>\n<p>As we‚Äôve seen, we need to isolate our modules from one another, so we can test each module separated from the others. In order to do so, there are two techniques we need to master:</p>\n<ol>\n<li>Test doubles</li>\n<li>Dependency injection</li>\n</ol>\n<h2>Test doubles</h2>\n<p>Test doubles are classes or functions that have the same signature or interface than another class or function but have their functionality especially adapted to be used for testing purposes. We‚Äôll focus in classes for the purpose of this article.</p>\n<p>All of them are based on the idea of interfaces/protocols. Basically you let the class to be dependent on an interface instead of a concrete implementation. In our previous example, you could have an interface called <code class=\"language-text\">APIType</code> with the following shape:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">APIType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">fetchContacts</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Contact</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That way we could have</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">API</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">APIType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">fetchContacts</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Contact</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And the view controller could have a dependency on <code class=\"language-text\">APIType</code> and not on <code class=\"language-text\">API</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> api<span class=\"token punctuation\">:</span> <span class=\"token builtin\">APIType</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well, so going back to test doubles, there are two of them that I‚Äôve used in my unit tests for the project I‚Äôve talked about in the beginning, mocks and stubs.</p>\n<h3>Mocks</h3>\n<p>Mocks are classes that record the calls on each method or property they have. They are used to do behavior-based testing. </p>\n<p>Imagine the case of an analytics layer. We could use a mock, in order to record the calls our view controller does for certain events.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">AnalyticsType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">purchaseDidEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnalyticsMock</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnalyticsType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Calls</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> purchaseDidEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> calls <span class=\"token operator\">=</span> <span class=\"token function\">Calls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">purchaseDidEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcalls<span class=\"token punctuation\">.</span>purchaseDidEnd <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using a mock, we could test the <em>behavior</em> of the SUT. We perform some action in the view controller, for instance, and then we verify that the mock has registered the event properly.</p>\n<h3>Stubs</h3>\n<p>Stubs, on the other hand, are object with a predefined return value on each of their methods. They are used to do state-based testing.</p>\n<p>Our previous example for the <code class=\"language-text\">APIType</code> could suit perfectly for a stub.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">APIStub</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">APIType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> fetchContactsResponse<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Contact</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token operator\">?</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">fetchContacts</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Contact</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>\n\t\t\tfetchContactResponse <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using a stub, we could test the <em>resulting state</em> of the SUT. We perform some action in the view controller, and then we verify that the SUT has ended in the expected state. In this case, with the correct value in the <code class=\"language-text\">contacts</code> property.</p>\n<h2>Dependency injection</h2>\n<p>The key to isolate the SUT from the rest of the system is to <em>inject</em> mocks and stubs instead of the concrete implementation for each of the SUT‚Äôs dependencies.</p>\n<p>Dependency injection consists in give an object its dependencies instead of letting it create them by itself. There are different ways of doing dependency injection, but let‚Äôs stick with one of the simplest ones for this article: constructor-based dependency injection.</p>\n<p>In our example, we could give the view controller an instance of an <code class=\"language-text\">APIType</code> instead of letting it create it by itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableView</span><span class=\"token operator\">!</span>\n\t<span class=\"token comment\">// 1</span>\n\t<span class=\"token keyword\">let</span> api<span class=\"token punctuation\">:</span> <span class=\"token builtin\">APIType</span>\n\n\t<span class=\"token keyword\">var</span> contacts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Contact</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">configureTableView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\tapi<span class=\"token punctuation\">.</span>fetchContacts <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> result <span class=\"token keyword\">in</span>\n\t\t\t<span class=\"token keyword\">switch</span> result <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>contacts <span class=\"token operator\">=</span> contacts\n\t\t\t\t<span class=\"token keyword\">self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>tableView<span class=\"token punctuation\">.</span><span class=\"token function\">reloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span>failure<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 2</span>\n\t<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">:</span> <span class=\"token builtin\">APIType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> api\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>nibName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ViewController\"</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">required</span> <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>coder aDecoder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSCoder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you pay attention to the comments, in (1) we don‚Äôt create the <code class=\"language-text\">APIType</code> because in (2) we receive the object in the constructor. As simple as that can be a dependency injection. </p>\n<h1>A simple unit test</h1>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">XCTest</span>\n@testable <span class=\"token keyword\">import</span> <span class=\"token builtin\">OurApp</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewControllerTests</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">testFetchContacts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// We start by creating the stub</span>\n\t\t<span class=\"token keyword\">let</span> api <span class=\"token operator\">=</span> <span class=\"token function\">APIStub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">let</span> contacts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token function\">Contact</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Fernando\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\t<span class=\"token function\">Contact</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Martin\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">]</span>\n\t\tapi<span class=\"token punctuation\">.</span>fetchContactsResponse <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// When we create our view controller, we inject the stub as its api.</span>\n\t\t<span class=\"token keyword\">let</span> viewController <span class=\"token operator\">=</span> <span class=\"token function\">ViewController</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">:</span> api<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// Trigger viewDidLoad()</span>\n\t\t<span class=\"token number\">_</span> <span class=\"token operator\">=</span> viewController<span class=\"token punctuation\">.</span>view\n\n\t\t<span class=\"token comment\">// Then we assert that the contacts have been</span>\n\t\t<span class=\"token comment\">// properly stored in the view controller's state.</span>\n\t\t<span class=\"token comment\">// This is state-based unit testing</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>\n\t\t\tviewController<span class=\"token punctuation\">.</span>contacts<span class=\"token punctuation\">,</span>\n\t\t\tcontacts\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>The three types of Unit tests</h1>\n<p>There are three types of unit tests that I use the most in my day to day job.</p>\n<h2>1. Input-Output</h2>\n<p>These are the simplest tests, and most frequently seen applied to functions. The process is very simple: you take a function, give it an input and expect a certain output of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Given this function</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// We can test it this way</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MathTests</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">testSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is an important think to consider before doing this kind of tests: <strong>The function must be pure.</strong> And what does it mean for a function to be pure? Well, it‚Äôs that the function shouldn‚Äôt have any side-effect, and for each input that you give to it, you will get the same output. That will let us be sure that regardless of the state of the system, we‚Äôll get the same result once and once again.</p>\n<h2>2. State-based</h2>\n<p>It would be great if every piece of code would be tested by Input-Output unit tests. However, we‚Äôre not that lucky.</p>\n<p>There are certain scenarios where we are forced to use other techniques. State-based testing consists on arrange the initial state of the object to be tested (arrange), then apply some action (act) on it, and finally check (assert) if the resulting state in the system under test is correct. Let‚Äôs see an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Given this view controller</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> emailTextField<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> passwordTextField<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> errorLabel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UILabel</span><span class=\"token operator\">!</span>\n\n\t<span class=\"token atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function\">loginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">guard</span> \n\t\t\t<span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> emailTextField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> \n\t\t\t<span class=\"token keyword\">let</span> password <span class=\"token operator\">=</span> passwordTextField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">guard</span> password<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">>=</span> <span class=\"token number\">6</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\terrorLabel<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Password too short\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// It can be tested this way</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginViewControllerTests</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> viewController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginViewController</span><span class=\"token operator\">!</span>\n\n\t<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>viewController <span class=\"token operator\">=</span> <span class=\"token function\">LoginViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">testLoginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Arrange</span>\n\t\tviewController<span class=\"token punctuation\">.</span>emailTextField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"ortizfernandomartin@gmail.com\"</span>\n\t\tviewController<span class=\"token punctuation\">.</span>passwordTextField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span>\n\n\t\t<span class=\"token comment\">// Act</span>\n\t\tviewController<span class=\"token punctuation\">.</span><span class=\"token function\">loginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// Assert</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>viewController<span class=\"token punctuation\">.</span>errorLabel<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Password too short\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It‚Äôs important to note that we haven‚Äôt used neither Mocks nor Stubs nor Dependency Injection for this example. The reason is simple: this view controller doesn‚Äôt have any dependency.</p>\n<p>Let‚Äôs extract the logic to get the error in a separate module and then do a stub for it.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Let's start by defining the protocol for our new functionality</span>\n<span class=\"token keyword\">protocol</span> <span class=\"token builtin\">LoginErrorProvider</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>forEmail email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> andPassword password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Given this view controller</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> emailTextField<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> passwordTextField<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> errorLabel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UILabel</span><span class=\"token operator\">!</span>\n\n\t<span class=\"token comment\">// We have added the dependency on it</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> errorProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProvider</span>\n\n\t<span class=\"token comment\">// And a custom constructor</span>\n\t<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>errorProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProvider</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>errorProvider <span class=\"token operator\">=</span> errorProvider\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>nibName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LoginViewController\"</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Other initializers...</span>\n\n\t<span class=\"token atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function\">loginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">guard</span> \n\t\t\t<span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> emailTextField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> \n\t\t\t<span class=\"token keyword\">let</span> password <span class=\"token operator\">=</span> passwordTextField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// And we use the error provider here</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> errorProvider<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>forEmail<span class=\"token punctuation\">:</span> email<span class=\"token punctuation\">,</span> andPassword<span class=\"token punctuation\">:</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\terrorLabel<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> error\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// We will now need a stub for testing this!</span>\n<span class=\"token comment\">// It will be VERY simple</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">LoginErrorProviderStub</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProvider</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> errorValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>forEmail email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> andPassword password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> errorValue\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// It can be tested this way</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginViewControllerTests</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> errorProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProviderStub</span><span class=\"token operator\">!</span>\n\t<span class=\"token keyword\">var</span> viewController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginViewController</span><span class=\"token operator\">!</span>\n\n\t<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>errorProvider <span class=\"token operator\">=</span> <span class=\"token function\">LoginErrorProviderStub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// And inject the provider!</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>viewController <span class=\"token operator\">=</span> <span class=\"token function\">LoginViewController</span><span class=\"token punctuation\">(</span>\n\t\t\terrorProvider<span class=\"token punctuation\">:</span> errorProvider\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">testLoginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Arrange</span>\n\t\tviewController<span class=\"token punctuation\">.</span>emailTextField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"ortizfernandomartin@gmail.com\"</span>\n\t\tviewController<span class=\"token punctuation\">.</span>passwordTextField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span>\n\t\terrorProvider<span class=\"token punctuation\">.</span>errorValue <span class=\"token operator\">=</span> <span class=\"token string\">\"Sample error\"</span>\n\n\t\t<span class=\"token comment\">// Act</span>\n\t\tviewController<span class=\"token punctuation\">.</span><span class=\"token function\">loginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// Assert</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>viewController<span class=\"token punctuation\">.</span>errorLabel<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sample error\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It‚Äôs important to not HOW IMPORTANT is the <strong>Stub</strong> test double in this kind of tests. As a general rule of thumb, Stubs are used for state-based testing and Mocks for behavior-based unit testing.</p>\n<h2>3. Behavior-based</h2>\n<p>An alternative way to make unit tests, that complements the state-based testing, is the behavior-based unit testing. It consists on making assertions on HOW the SUT used its dependencies. Let‚Äôs go straight to an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Let's start by defining the protocol for our new functionality</span>\n<span class=\"token keyword\">protocol</span> <span class=\"token builtin\">LoginErrorProvider</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>forEmail email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> andPassword password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Given the same view controller</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> emailTextField<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> passwordTextField<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n\t<span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> errorLabel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UILabel</span><span class=\"token operator\">!</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> errorProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProvider</span>\n\n\t<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>errorProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProvider</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>errorProvider <span class=\"token operator\">=</span> errorProvider\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>nibName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LoginViewController\"</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Other initializers...</span>\n\n\t<span class=\"token atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function\">loginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">guard</span> \n\t\t\t<span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> emailTextField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> \n\t\t\t<span class=\"token keyword\">let</span> password <span class=\"token operator\">=</span> passwordTextField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> errorProvider<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>forEmail<span class=\"token punctuation\">:</span> email<span class=\"token punctuation\">,</span> andPassword<span class=\"token punctuation\">:</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\terrorLabel<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> error\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// We will now need a mock for testing this now</span>\n<span class=\"token comment\">// It will be VERY simple</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">LoginErrorProviderMock</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProvider</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> errorCalls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>forEmail email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> andPassword password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n\t\terrorCalls<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// It can be tested this way</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginViewControllerTests</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> errorProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginErrorProviderMock</span><span class=\"token operator\">!</span>\n\t<span class=\"token keyword\">var</span> viewController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">LoginViewController</span><span class=\"token operator\">!</span>\n\n\t<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>errorProvider <span class=\"token operator\">=</span> <span class=\"token function\">LoginErrorProviderMock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// And inject the provider!</span>\n\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>viewController <span class=\"token operator\">=</span> <span class=\"token function\">LoginViewController</span><span class=\"token punctuation\">(</span>\n\t\t\terrorProvider<span class=\"token punctuation\">:</span> errorProvider\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">testLoginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Arrange</span>\n\t\tviewController<span class=\"token punctuation\">.</span>emailTextField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"ortizfernandomartin@gmail.com\"</span>\n\t\tviewController<span class=\"token punctuation\">.</span>passwordTextField<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span>\n\n\t\t<span class=\"token comment\">// Act</span>\n\t\tviewController<span class=\"token punctuation\">.</span><span class=\"token function\">loginButtonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// The assertion will be different this time</span>\n\t\t<span class=\"token comment\">// We'll check if the error provider has been called just once</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>errorProvider<span class=\"token punctuation\">.</span>errorCalls<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\n\t\t<span class=\"token comment\">// And we'll check if the mock has been called in the correct way</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>\n\t\t\terrorProvider<span class=\"token punctuation\">.</span>errorCalls<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \n\t\t\t<span class=\"token string\">\"ortizfernandomartin@gmail.com\"</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">XCTAssertEqual</span><span class=\"token punctuation\">(</span>\n\t\t\terrorProvider<span class=\"token punctuation\">.</span>errorCalls<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n\t\t\t<span class=\"token string\">\"1234\"</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Testable architecture</h1>\n<p>Let‚Äôs talk for a moment about what makes a testable architecture. In the previous article, I explained about dependency injection and test doubles. A testable architecture lets us inject test doubles to test each part of it in a relatively easy way.</p>\n<h1>VIPER</h1>\n<p>VIPER stands for View, Interactor, Presenter, Entity and Router, and it‚Äôs an example of a testable architecture based on the idea of <a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">Clean Architecture</a> by Robert Martin.</p>\n<p>To be brief:</p>\n<ul>\n<li>The view involves the <code class=\"language-text\">UIKit</code> related classes, such as <code class=\"language-text\">UIViewController</code> and <code class=\"language-text\">UIView</code> descendants.</li>\n<li>The interactor consists in the business use cases for the app. It‚Äôs completely platform independent and doesn‚Äôt know anything about the way the data will be presented.</li>\n<li>The presenter talks to the interactor, gets the data and prepares some presentation-ready structures that can be requested by the view.</li>\n<li>The entities are just the models that are used by the interactor.</li>\n<li>The router is the class that is responsible for the navigation. It holds a reference of a <code class=\"language-text\">UINavigationController</code> or a <code class=\"language-text\">UIViewController</code> and is hold by the presenter.</li>\n</ul>\n<p>In VIPER, each layer can be tested in isolation. If you take the presenter, you can give it a mock of the router and the interactor, and test how the it calls them to verify its correct behavior.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d9ccf3d8-6e47-489a-b274-14c2ff8e42c3/VIPERArchitecture.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d9ccf3d8-6e47-489a-b274-14c2ff8e42c3/VIPERArchitecture.png\"></p>\n<p>Each of these modules are self contained pieces of the ‚Äúarchitecture cake‚Äù, going from the core to the boundaries.</p>\n<h2>VIPER: The revelation</h2>\n<p>You can divide the layers in the VIPER architecture in three important categories:</p>\n<ul>\n<li><strong>Core</strong>: The Entities and the Data Sources are nearer to the core of the business logic.</li>\n<li><strong>Policies</strong>: The Interactor, Router and to a certain extent, also the presenter, are policies inside the app. They decide what to call and how, and make some decisions in the logic flow.</li>\n<li><strong>UI</strong>: The View and the Presenter to some extent conform the layer that is nearest to the user.</li>\n</ul>\n<p>I‚Äôve noticed that:</p>\n<ul>\n<li>The core is usually more testable in a input-output way</li>\n<li>The Policies are usually more testable in a Behavior-based way</li>\n<li>\n<p>The UI is usually more testable in a State-based way</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8e888bb-8fd6-4eb5-bf0b-a992a7f72880/VIPERTesting.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8e888bb-8fd6-4eb5-bf0b-a992a7f72880/VIPERTesting.png\"></p>\n</li>\n</ul>\n<p>The reason for that comes from the own nature of the layers. The View is stateful by nature, so State-based testing is perfect for it. The intermadiate layers know what to call and how to do it, so Behavior-based testing fits perfectly. Finally, the Core layer know nothing about the other layers, and almost never store state on them, so they fits perfect in the Input-Output way.</p>\n<h1>Summary</h1>\n<p>Unit testing consists on testing a unit of code (a class, a function) isolated from the rest of the system. In order to do so, there are two powerful techniques we can use: test doubles (mocks or stubs), and dependency injection.</p>","frontmatter":{"title":"Testing the Untested","date":"August 19, 2020","description":"Testing a codebase that was not designed for being tested"}},"previous":null,"next":{"fields":{"slug":"/2020-11-15/"},"frontmatter":{"title":"Starting Quick / BDD in iOS"}}},"pageContext":{"id":"b21ff26e-d425-51d4-9882-fd0ca0ea7221","previousPostId":null,"nextPostId":"d84c95cf-5f8b-5711-adc9-8b047faa4291"}},"staticQueryHashes":["2841359383","916993862"]}